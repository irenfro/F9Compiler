#!/bin/sh
#
# genfsm  --  a tool to generate FSM entries
#
# use:  getfsm [file]
#
#
#   The input ontains a series of state definitions, where each definition
# specifies the transitions leaving a state.  Each definition specifies the
# name of a state followed by one or more lines that specify transitions.
# All fields must be tab-separate.  Blanks are not allowed in the
# specification, and are considered significant.
#
# A state name starts in column 1; all specification lines must be indented
# by at least one tab, and must contain four items (separated by tabs).
#
#
#The general form of a definition is:
#
#
#    column 1
#	|
#	|
#	V
#	STATE_NAME
#
#		any        NEXT_STATE  ACTION  LEXTYPE
#		range      NEXT_STATE  ACTION  LEXTYPE
#		range2     NEXT_STATE  ACTION  LEXTYPE
#
#
# Usually, state names are in upper-case because they each turn into a
# #define.  Lines that specify a transition start with a character,
# a range of characters, or the keyword  any  which is used to set a
# default.  If a line specifies any, it must appear before other entries.
# An individual character uses the C style of single quotes: 'x'.  To
# specify a range of characters, write the extents of the rage with a
# minus sign between them, such as A-Z or 0-9.  Finally a symbolic
# constant, such as EOF_CHAR, can appear.  Genfsm merely copies the
# definition into the C code, so a #define must appear elsewhere.
# The second through fourth items in a transition specify a next
# state, an action, and lexical type.  The possible actions and lexical
# types are specified in the def.h file.
#
# Important note: this tool blindly copies most of the entries into
# C declarations for the FSM without checking semantic.  For example,
# if the NEXT-STATE in an entry contains the garbage characters
# X#ADSDF*&#^& the string will be copied into the C declaration and
# cause compilation errors.
#
# Any line that has a C-style comment /*...*/  after one or more
# tabs will be copied in to the output.  Thus, one can use comments
# to explain states or transitions.
#

case $# in

  0)	FILE=
	;;

  1)	FILE="$1"
	if test ! -r $FILE; then
		echo "Cannot read file $FILE" >&2
		exit 1
	fi
	;;

  *)	echo "Use is  genfsm [file]" >&2
	exit 1
	;;

esac

Q="'"
#  sed 's/		*/	/g' |
cat $FILE | gawk '


BEGIN {
	states = 0;		# Count of states encountered
	quote  = "'$Q'";	# Single quote (because we are using
				# single quotes around the program).
				# State name definition
}


/^[^ 	]/ {	# State name line starts with non-blank and non-tab

	if (NF != 1) {
		printf("Error line %d: state name must have one field\n",NR);
		exit(1);
	}


	state_name = $1;
	tmp = sprintf("#define	%s", state_name);
	printf("%s", tmp);
	for (ll=length(tmp); ll<32; ll++) {
		printf(" ");
	}
	printf("%d\n", states);
	states++;
	nentries = 0;
	printf("/************************************************************************/\n");
	printf("/*									*/\n");
	x = sprintf("/* Transitions for  %s  (%d)", state_name, states);
	printf("%s", x);
		for (ll = length(x); ll<72; ll++) { printf(" "); }  printf("*/\n");
	printf("/*									*/\n");
	printf("/************************************************************************/\n");
	next;
}


# Empty like

/^$/ {
	print;
	next;
}


# Blank like

/^[ 	]*$/ {
	print;
	next;
}


# Line starting with a comment

/^		*\// {
	print;
	next;
}


# Other lines

{
	if (states == 0) {
		printf("Error line %d: specification precedes state name\n", NR);
		exit(1);
	} else if (NF != 4) {
		printf("Error line %d: specification needs four fields\n", NR);
		exit(1);
	}

	# Specification with four fields

	if ($1 == "any") {
		if (nentries++ != 0) {
			printf("Error line %d: \"any\" is not the first specification\n", NR);
			exit(1);
		}
		printf("	for (c=0; c<=CHAR_RANGE; c++) {\n");
		printf("		fsm[%s][c].fsm_nextst = %s;\n", state_name, $2);
		printf("		fsm[%s][c].fsm_action = %s;\n", state_name, $3);
		printf("		fsm[%s][c].fsm_lextyp = %s;\n", state_name, $4);
		printf("	}\n");
	} else if ((substr($1,1,1) != quote) && ($1 ~/\-/)) {
		if (length($1) != 3) {
			printf("Error line %d: incorrect range specification\n", NR);
			exit(1);
		}
		nentries++;
		char1 = substr($1,1,1);
		char2 = substr($1,3,1);
		printf("	for (c=%s%s%s; c<=%s%s%s; c++) {\n", \
					quote, char1, quote, \
					quote, char2, quote);
		printf("		fsm[%s][c].fsm_nextst = %s;\n", state_name, $2);
		printf("		fsm[%s][c].fsm_action = %s;\n", state_name, $3);
		printf("		fsm[%s][c].fsm_lextyp = %s;\n", state_name, $4);
		printf("	}\n");
	} else {
		nentries++;
		printf("	fsm[%s][%s].fsm_nextst = %s;\n", state_name, $1, $2);
		printf("	fsm[%s][%s].fsm_action = %s;\n", state_name, $1, $3);
		printf("	fsm[%s][%s].fsm_lextyp = %s;\n", state_name, $1, $4);
	}
	next;
}

END {
	printf("#define	STATES\t\t\t%d\n", states);
}'
