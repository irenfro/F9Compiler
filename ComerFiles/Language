Comments:
		/* anything including NEWLINEs; a comment ends with */
		// anything up to the next NEWLINE

Whitespace:
		blanks or tabs

Constants:

    decimal:	a string of decimal digits
    hex:	0x followed by a sting of hex digits (0-9 and any of abcdef)
    string:	a quoted string, such has "hi there"


String constants:

    A string constant consists of characters surrounded by double quotes,
    as in:

		"Here is a string.\n"

    F9 strings use the same conventions as C, namely that a backslash means
    to treat the next character specially.  For example, the sequence

		\n

    represents a NEWLINE character.  The sequence \" inserts a double quote
    into the string, \t inserts a tab, \n inserts a NEWLINE, and so on.


Variables names:

    A name must start with a lower-case or uppercase letter or an underscore
		and can contain letters, digits, and underscores

Types:

    F9 provides two type names used to declare variables:

	int	An integer is always a 32-bit signed value

	str	String, as defined above

Arrays:

    F9 provides one-dimensional arrays.  As in C, each array is indexed from
    0 through N-1, where N is the number of items in the array.


Program format

    An F9 program has the form:

    program {
		variable declarations

		statements
    }


Declarations:

    Variables are declared as in C, by giving the type name followed by variable
    names and then a terminating semicolon.  If multiple names are specified,
    they are separated by commas (as in C).
    Examples:

		int  x;
		int  a, b;
		str  s;

    An array is declared by appending [size], where size is a positive number
    that specifies the number of items in the array.
    Examples:

		str  nlist[10];		/* nlist is an array of 10 strings */
		int  m[20], n[2];	/* m  is an array of 20 integers, and */
					/* n is an array of 2 integers */

Statements:

    The item 'statements' in the program description above means that one or
    more statements appears.  The syntax of each statement is planned carefully
    to ensure that no further separation is needed or allowed.  In particular, a
    semicolon should never occur after a right brace.  Furthermore, the
    language does not allow a null statement (i.e., a semicolon by itself).

Statement types:

    There are four statement types: conditional, iteration, function call
	and assignment.

    Note: Unlike C, braces are required, even if only one statement appears.
	So, braces are not optional in the descriptions that follow.

Conditional:

    As in most languages, there are tow forms of a conditional statement:

	    if (expression) { statements }

	    if (expression) { statements } else { statements }

Iteration:

	while (expression) { statements }

Function call:

    There are two builtin functions that can be called:

	exit( expression )

     The expression gives a Unix exit code, with zero used for a
     normal exit and non-zero used for abnormal exit.

	print( one-or-more-comma-separated arguments )

    Each of the comma-separated arguments for print can take one of
    two forms: an arithmetic expression (the value is printed in
    decimal) or a string, which can be a string variable or a
    string constant.

Assignment:

    An assignment statement takes one of two forms.

  * Form 1: conventional assignment

	variable  assignmentop  value ;

    For a string variable, the only assignmentop is =, and the
    value must be a string constant ( "..."  ).

    For an integer variable, assignment operator can be any of the
    following assignment operators, which have the same meaning as
    in C:

	=  +=   -=   *=   /=

    and the value is an arithmetic expression that can contain
    any of the following operators:

	multiplication operators: *  /		multiply, divide

	addition operators:	  +   -		plus, minus

	comparison operators:	  <  <=		less, less-equal
				  >  >=		greater, greater-equal
				  == !=		equal, not equal

	logical connectors:	  && ||		and or, executed left-to-right

    As usual, multiplication operators take precedence over addition
    operators, which take precedence over comparison operators, which
    take precedence over logical connectors. As in C, parenthesis can be
    used to group items (i.e., to override normal precedence.  So,

		 a * (b + c)

    means "add b and c, and then multiply the result by a.  As in
    mathematics, parentheses must be well-nested.


  * Form 2: read assignment

    The second form of assignment reads values from standard input, stores
    each value in a specified variable, and returns the number of items
    read, which is the value to be assigned.

	count_variable = read( comma-separated-variable-list)

    where the comma-separated-variable-list is a list of variables
    to be read.  The read function scans the input, ignoring white
    space.  It extracts integer values until values have been found
    for all variables in the list or a non-digit has been encountered.
    The read function returns the number of variables that have
    been read.  Note: once it encounters a non-digit, the read
    function can never be used to read further items.


Reserved words:

    The following are reserved, and cannot be used as variable names:

	int, str, if, else, while, program, print, exit, read
